var gulp = require("gulp");
var rename = require("gulp-rename");
var iconfont = require('gulp-iconfont');
var consolidate = require('gulp-consolidate');
var svgstore = require('gulp-svgstore');
var svgmin = require('gulp-svgmin');
var path = require('path');

var fontName = 'icons'; // set name of your font
var template = 'rivium-style'; // you can also choose 'foundation-style'

gulp.task('svg2icons', function(){
  gulp.src('assets/svgs/*.svg') // you can also choose 'symbol-font-16px.sketch'
    .pipe(iconfont({
      fontName: fontName,
      normalize: true,
      formats: ['ttf', 'eot', 'woff', 'svg']
    }))
    .on('glyphs', function(glyphs) {
      var options = {
        glyphs: glyphs.map(function(glyph) {
          // this line is needed because gulp-iconfont has changed the api from 2.0
          return { name: glyph.name, codepoint: glyph.unicode[0].charCodeAt(0) }
        }),
        fontName: fontName,
        fontPath: '', // set path to font (from your CSS file if relative)
        className: '' // set class name in your CSS
      };
      gulp.src('templates/' + template + '.css')
        .pipe(consolidate('lodash', options))
        .pipe(rename({ basename:'stylesheet' }))
        .pipe(gulp.dest('dist/fonts/icons')); // set path to export your CSS

      // if you don't need sample.html, remove next 4 lines
      gulp.src('templates/' + template + '.html')
        .pipe(consolidate('lodash', options))
        .pipe(rename({ basename:fontName }))
        .pipe(gulp.dest('dist/fonts/icons')); // set path to export your sample HTML
    })
    .pipe(gulp.dest('dist/fonts/icons')); // set path to export your fonts
});

gulp.task('svgstore', function () {
    return gulp
        .src('assets/svgs/*.svg')
        .pipe(rename({prefix: '-svg-repository-'}))
        .pipe(svgmin(function (file) {
            var prefix = path.basename(file.relative, path.extname(file.relative));
            return {
                plugins: [{
                    cleanupIDs: {
                        prefix: prefix + '-',
                        minify: true
                    }
                }]
            }
        }))
        .pipe(svgstore({ inlineSvg: true }))
        .pipe(rename({ basename:'autogenerated-svgstore-repository', extname:'.html'}))
        .pipe(gulp.dest('dist/svgstore'));
});

gulp.task('default', ['svg2icons', 'svgstore'] );
